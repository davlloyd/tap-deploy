
# Set custom DNS domain value for CNR. Domain DNS wild card to CNR External IP required
# CUSTOM_DOMAIN=
CUSTOM_DOMAIN=tap2.tanzu.rocks

# Target Application Platform version for package syncing
# TAP_RELEASE=
TAP_RELEASE=1.5.1

# Enabling TAP Gitops model for configurations storage
# GITOPS_ENABLED=0/1
GITOPS_ENABLED=1

# GITOPS model values, can leave blank if GITOPS_ENABLED=0
GITOPS_SERVER=https://github.com/
GITOPS_OWNER=surfers-lookout
GITOPS_ACCOUNT=davlloyd
GITOPS_REPO=surfers-gitops

# Method for git pull requests. Either 'direct' for store but no pull request or 'pull_request' if approval required
# GIT_COMMIT_STRATEGY=direct/pull_request
GIT_COMMIT_STRATEGY=direct

# GitOps Namespace autoprovisioner settings
GITOPS_NS_REPO=surfers-gitops
# Additional configurations to apply to namespace
GITOPS_NS_REPO_FOLDER_ADDITIONS=ns-provisioner/additions
# Setup for namespace settups
GITOPS_NS_REPO_FOLDER_PROVISION=ns-provisioner/provision
# Location of secret overlays for namesapce
GITOPS_NS_REPO_FOLDER_CREDENTIALS=ns-provisioner/credentials


# Set the OOTB supply chain to enable
# SUPPLY_CHAIN= basic/testing/testing_scanning
SUPPLY_CHAIN=testing_scanning

# Type of cluster deployment target. TKG clusters do not need the Cluster Essentials deployed
# TKG_CLUSTER = yes/no 
TKG_CLUSTER=no

# TAP install method
# profile = use the package profile to install the sets
# standard = Install all packages individually
INSTALL_METHOD=profile

# TAP Install profile to deploy
#   full:       This profile contains all of the Tanzu Application Platform packages.
#   iterate:    This profile is intended for iterative application development.
#   build:      This profile is intended for the transformation of source revisions to workload revisions. Specifically, hosting Workloads and SupplyChains.
#   run:        This profile is intended for the transformation of workload revisions to running Pods. Specifically, hosting Deliveries and Deliverables.
#   view:       This profile is intended for instances of applications related to centralized developer experiences. Specifically, Tanzu Application Platform GUI and Metadata Store.
# PACKAGE_PROFILE=
PACKAGE_PROFILE=full

# Namespace to enable for workload deployment via the default supply chain
# DEV_NAMESPACE=
DEV_NAMESPACE=default

# If self signed certificates do not want to be used, a shared certificate issuer
# can be used by specifying the clusterissuer name below.
# If it is left blank, TLS is disabled
# SHARED_ISSUER=
# SHARED_ISSUER=letsencrypt-dynu-tap
SHARED_ISSUER=


# Wildcard cert can be used for some compoonents where the shared issuer is not wanted to be used
# The cert needs to be configured in a tls secret, shared issuer can be used to generate the cert and secret
# Set CERT_WILDCARD_ENABLED to 1 if wildcard certificates used, 0 if not
# CERT_WILDCARD_ENABLED=0/1
CERT_WILDCARD_ENABLED=1

# Set values for located of wildcard certificate secret
# CERT_WILDCARD_NAMESPACE=
# CERT_WILDCARD_SECRET=
CERT_WILDCARD_NAMESPACE=default
CERT_WILDCARD_SECRET=tap-cert


# Pre-requisite releases
#KAPP_RELEASE=v0.41.2
KAPP_RELEASE=v0.45.0
#SECRETGEN_RELEASE=v0.11.0
SECRETGEN_RELEASE=v0.14.2

#Tanzu Build Service descripter. options are lite or full
# DESCRIPTOR_NAME=

# Set deployment target type of 'local' for models such as kind or 'cluster' for TKG, GKE, etc
# DEPLOYMENT_MODEL=
DEPLOYMENT_MODEL=cluster

# Public registry access details
# Registry host name e.g. us.gcr.io
# REGISTRY_HOST=
REGISTRY_HOST=us.gcr.io
#REGISTRY_HOST=harbor.services.tanzu.rocks

# Registry project name (e.g. user accopunt name in Dockerhub)
# REGISTRY_PROJECT=
REGISTRY_PROJECT=lloyd-266015
#REGISTRY_PROJECT=labs

# Registry account name (e.g. in gcr it is _json_key but in Harbor or dockerhub it is your account name)
# REGISTRY_ACCOUNT=
#REGISTRY_ACCOUNT=tapuser
REGISTRY_ACCOUNT=_json_key

# file path that contains the registry password or access key. 
# REGISTRY_PASSWORD_FILE=
#REGISTRY_PASSWORD_FILE=~/credentials/harbor-tapuser.txt
REGISTRY_PASSWORD_FILE=~/credentials/gcr.json
# registry password 
# REGISTRY_PASSWORD=
REGISTRY_PASSWORD=

# Repsoitory that all build service images are uploaded into
# REGISTRY_REPO_TBS=
REGISTRY_REPO_TBS=build-service

# Pivotal Network access credentials. This is used to download the source packages
# PIVNET_ACCOUNT=
# PIVNET_PASSWORD_FILE=
# PIVNET_PASSWORD=
PIVNET_ACCOUNT=lloydd@vmware.com
PIVNET_PASSWORD_FILE=~/credentials/pivnet.txt
PIVNET_PASSWORD=

# Set Git access values for TAP UI
GIT_HOST=github.com
GIT_ACCESS_TOKEN=
GIT_ACCESS_TOKEN_FILE=~/credentials/gittoken.txt

# Default catalog item to be imported into TAP Gui
#GIT_CATALOG_URL=https://github.com/davlloyd/surfers-gitops/blob/main/catalog/catalog-org.yaml
GIT_CATALOG_URL=https://github.com/surfers-lookout/surfers-gitops/blob/main/catalog/catalog-org.yaml
#GIT_CATALOG_URL=https://github.com/tap-labs/tap-catalog/blob/main/catalog-org.yaml

# Git SSH Access for TAP GUI
GIT_SSH_KEY_FILE=~/.ssh/id_ed25519.pub
GIT_SSH_KEY=

# Git App access for TAP GUI
GIT_AUTH_CLIENTID_FILE=~/credentials/surferslookout/gitclientid-tap2.txt
GIT_AUTH_CLIENTID=
GIT_AUTH_SECRET_FILE=~/credentials/surferslookout/gitsecret-tap2.txt
GIT_AUTH_SECRET=

# TAP GUI internal port
TAP_GUI_PORT=7000

# TAP GUI remote TechDocs bucket (Google Cloud Storage)
DOC_BUCKET=techdocs-tap
DOC_BUCKET_CRED_FILE=~/credentials/gcr.json
DOC_BUCKET_CRED=

# Build Services dependencies package to install 
# false=lite, true=full
# TBS_FULL_DEPENDENCIES=
TBS_FULL_DEPENDENCIES=true

