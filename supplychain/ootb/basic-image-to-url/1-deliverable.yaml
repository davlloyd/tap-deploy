apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  annotations:
    kapp.k14s.io/identity: v1;/carto.run/ClusterTemplate/deliverable-template;carto.run/v1alpha1
    kapp.k14s.io/original: '{"apiVersion":"carto.run/v1alpha1","kind":"ClusterTemplate","metadata":{"labels":{"app.tanzu.vmware.com/deliverable-type":"web","kapp.k14s.io/app":"1652683466758541831","kapp.k14s.io/association":"v1.1ffcda80f456c9e6f298bc5cfbbe05cb"},"name":"deliverable-template"},"spec":{"params":[{"default":{},"name":"registry"}],"ytt":"#@
      load(\"@ytt:data\", \"data\")\n\n#@ def merge_labels(fixed_values):\n#@   labels
      = {}\n#@   if hasattr(data.values.workload.metadata, \"labels\"):\n#@     labels.update(data.values.workload.metadata.labels)\n#@   end\n#@   labels.update(fixed_values)\n#@   return
      labels\n#@ end\n\n#@ def has_git_params():\n#@   if ''gitops_repository_prefix''
      in data.values.params:\n#@     return True\n#@   end\n#@\n#@   if ''gitops_repository''
      in data.values.params:\n#@     return True\n#@   end\n#@\n#@   return False\n#@
      end\n\n#@ def is_gitops():\n#@   return has_git_params()\n#@ end\n\n#@ def param(key):\n#@   if
      not key in data.values.params:\n#@     return None\n#@   end\n#@   return data.values.params[key]\n#@
      end\n\n#@ def git_repository():\n#@   if ''gitops_repository'' in data.values.params:\n#@     return
      param(\"gitops_repository\")\n#@   end\n#@\n#@   prefix = param(\"gitops_repository_prefix\")\n#@   return
      prefix + data.values.workload.metadata.name + \".git\"\n#@ end\n\n#@ def image():\n#@   return
      \"/\".join([\n#@    data.values.params.registry.server,\n#@    data.values.params.registry.repository,\n#@    \"-\".join([\n#@      data.values.workload.metadata.name,\n#@      data.values.workload.metadata.namespace,\n#@      \"bundle\",\n#@    ])\n#@   ])
      + \":\" + data.values.workload.metadata.uid\n#@ end\n\n\n---\napiVersion: carto.run/v1alpha1\nkind:
      Deliverable\nmetadata:\n  name: #@ data.values.workload.metadata.name\n  labels:
      #@ merge_labels({ \"app.kubernetes.io/component\": \"deliverable\", \"app.tanzu.vmware.com/deliverable-type\":
      \"web\" })\nspec:\n  #@ if/end hasattr(data.values.workload.spec, \"serviceAccountName\"):\n  serviceAccountName:
      #@ data.values.workload.spec.serviceAccountName\n\n  #@ if/end is_gitops():\n  params:\n    -
      name: \"gitops_ssh_secret\"\n      value: #@ param(\"gitops_ssh_secret\")\n\n  source:\n    #@
      if/end is_gitops():\n    git:\n      url: #@ git_repository()\n      ref:\n        branch:
      #@ param(\"gitops_branch\")\n\n    #@ if/end not is_gitops():\n    image: #@
      image()\n"}}'
    kapp.k14s.io/original-diff-md5: c6e94dc94aed3401b5d0f26ed6c0bff3
  creationTimestamp: "2022-05-16T06:44:31Z"
  generation: 1
  labels:
    app.tanzu.vmware.com/deliverable-type: web
    kapp.k14s.io/app: "1652683466758541831"
    kapp.k14s.io/association: v1.1ffcda80f456c9e6f298bc5cfbbe05cb
  name: deliverable-template
  resourceVersion: "41309"
  uid: dce0804e-bcdb-4a56-ac0b-ab0138b813f8
spec:
  params:
  - default: {}
    name: registry
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def has_git_params():
    #@   if 'gitops_repository_prefix' in data.values.params:
    #@     return True
    #@   end
    #@
    #@   if 'gitops_repository' in data.values.params:
    #@     return True
    #@   end
    #@
    #@   return False
    #@ end

    #@ def is_gitops():
    #@   return has_git_params()
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def git_repository():
    #@   if 'gitops_repository' in data.values.params:
    #@     return param("gitops_repository")
    #@   end
    #@
    #@   prefix = param("gitops_repository_prefix")
    #@   return prefix + data.values.workload.metadata.name + ".git"
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "bundle",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end


    ---
    apiVersion: carto.run/v1alpha1
    kind: Deliverable
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deliverable", "app.tanzu.vmware.com/deliverable-type": "web" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      #@ if/end is_gitops():
      params:
        - name: "gitops_ssh_secret"
          value: #@ param("gitops_ssh_secret")

      source:
        #@ if/end is_gitops():
        git:
          url: #@ git_repository()
          ref:
            branch: #@ param("gitops_branch")

        #@ if/end not is_gitops():
        image: #@ image()
