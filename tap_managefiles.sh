

# Create configuration files for TAP Packages and a single package profile
# - app-accelerator-values.yaml
# - app-live-view-values.yaml
# - cnr-values.yaml
# - default-supply-chain-values.yaml
# - tbs-values.yaml


####
log "Create TAP Profile File"

cat > "tap-values.yml" <<EOF
profile: $PACKAGE_PROFILE
ceip_policy_disclosed: true 

supply_chain: $SUPPLY_CHAIN

shared:
  ingress_domain: $CUSTOM_DOMAIN
  ingress_issuer: "$SHARED_ISSUER"
  kubernetes_distribution: ""
  kubernetes_version: "$K8SMAJORVERSION.$K8SMINORVERSION"
  image_registry:
    project_path: "$REGISTRY_HOST/$REGISTRY_PROJECT/$REGISTRY_REPO_TBS"
    username: "$REGISTRY_ACCOUNT"
    password: '$REGISTRY_PASSWORD'


contour:
  envoy:
    service:
      type: $SERVICE_TYPE

buildservice:
  kp_default_repository: "$REGISTRY_HOST/$REGISTRY_PROJECT/$REGISTRY_REPO_TBS"
  kp_default_repository_username: "$REGISTRY_ACCOUNT"
  kp_default_repository_password: '$REGISTRY_PASSWORD'
  exclude_dependencies: $TBS_FULL_DEPENDENCIES    # Need to add logic to do post update of full packages if set to true
  #extras start below
  #descriptor_name: "$DESCRIPTOR_NAME"
  #enable_automatic_dependency_updates: true
  #tanzunet_username: "$PIVNET_ACCOUNT"
  #tanzunet_password: "$PIVNET_PASSWORD"

accelerator:
  ingress:
    include: true


metadata_store:
  ns_for_export_app_cert: "*"
  app_service_type: $SERVICE_TYPE
  ingressDomain: "$CUSTOM_DOMAIN"
  ingress_enabled: "true"


scanning:
  metadataStore:
    url: ""

grype:
  targetImagePullSecret: "registry-credentials"

learningcenter:
  ingressDomain: "learningcenter.$CUSTOM_DOMAIN"

policy:
  tuf_enabled: false

  
tap_gui:
  service_type: "$SERVICE_TYPE"
  ingressEnabled: "true"
  ingressDomain: "$CUSTOM_DOMAIN"
  app_config:
    app:
      baseUrl: https://tap-gui.$CUSTOM_DOMAIN
    catalog:
      locations:
        - type: url
          target: $GIT_CATALOG_URL
      processors:
        appAccelerators:
          target: http://acc-server.accelerator-system.svc.cluster.local/api/accelerators
    reading:
      allow:
      - host: acc-server.accelerator-system.svc.cluster.local
    backend:
      baseUrl: https://tap-gui.$CUSTOM_DOMAIN
      cors:
        origin: https://tap-gui.$CUSTOM_DOMAIN
    integrations:
      github:
        - host: github.com
          token: $GIT_ACCESS_TOKEN
    proxy:
      /metadata-store:
        target: https://metadata-store-app.metadata-store:8443/api/v1
        changeOrigin: true
        secure: false
        headers:
          Authorization: "Bearer $STORE_ACCESS_TOKEN"
          X-Custom-Source: project-star 
    auth:
      allowGuestAccess: true
      environment: development
      providers:
        github:
          development:
            clientId: $GIT_AUTH_CLIENTID
            clientSecret: $GIT_AUTH_SECRET
            prompt: auto
      loginPage:
        github:
          title: "Github Login"
          message: "Enter with your GitHub account"
    techdocs:
      builder: external
      generators:
        techdocs: docker
      publisher:
        type: googleGcs
        googleGcs:
          bucketName: $DOC_BUCKET
          credentials: '$DOC_BUCKET_CRED'
EOF



if [ "$GITOPS_ENABLED" == 1 ]; then
  log "Enable GitOps Model"

cat >> "tap-values.yml" <<EOF
  gitops:
    server_address: $GITOPS_SERVER
    repository_owner: $GITOPS_OWNER
    repository_name: $GITOPS_REPO
    ssh_secret: "git-access"
    branch: main
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_title: "ready for review"
      pull_request_body: "generated by supply chain"
  git_implementation: libgit2   # default value go-git
EOF

else 

  log "GitOps Model not used"

fi


if [ "$CERT_WILDCARD_ENABLED" == 1 ]; then
  log "Setup to use wildcard certificate"

cat >> "tap-values.yml" <<EOF
  tls:
    namespace: $CERT_WILDCARD_NAMESPACE
    secretName: $CERT_WILDCARD_SECRET

cnrs:
  domain_name: "apps.$CUSTOM_DOMAIN"
  default_tls_secret: $CERT_WILDCARD_NAMESPACE/$CERT_WILDCARD_SECRET

EOF

else
  log "Wildcard certificate not used"

cat >> "tap-values.yml" <<EOF

cnrs:
  domain_name: "apps.$CUSTOM_DOMAIN"

EOF

fi

cat >> "tap-values.yml" <<EOF

namespace_provisioner:
  controller: $CONTROLLER_NOGITOPS
EOF

if [ "$GITOPS_ENABLED" == 1 ]; then
  log "Enable GitOps for supplychain"

  cat >> "tap-values.yml" <<EOF
  additional_sources:
  - git:
      ref: origin/main
      subPath: $GITOPS_NS_REPO_FOLDER_ADDITIONS
      url: $GITOPS_SERVER$GITOPS_OWNER/$GITOPS_NS_REPO.git
      secretRef:
        name: git-access
        namespace: tap-install
        create_export: true
    path: _ytt_lib/$GITOPS_NS_REPO_FOLDER_ADDITIONS-setup
  - git:
      ref: origin/main
      subPath: $GITOPS_NS_REPO_FOLDER_CREDENTIALS
      url: $GITOPS_SERVER$GITOPS_OWNER/$GITOPS_NS_REPO.git
  gitops_install:
    ref: origin/main
    subPath: $GITOPS_NS_REPO_FOLDER_PROVISION
    url: $GITOPS_SERVER$GITOPS_OWNER/$GITOPS_NS_REPO.git
  import_data_values_secrets:
  - name: git-auth
    namespace: tap-install
    create_export: true
  overlay_secrets:
  - name: git-auth-overlay
    namespace: tap-install
    create_export: true


$SUPPLY_CHAIN_CONFIG:
  gitops:
    ssh_secret: git-ssh-secret
  #cluster_builder: default
  registry:
    server: "$REGISTRY_HOST"
    repository: "$REGISTRY_PROJECT/supply-chain"
EOF
else
  cat >> "tap-values.yml" <<EOF
  namespace_selector:
    matchExpressions:
    - key: apps.tanzu.vmware.com/tap-ns
      operator: Exists


$SUPPLY_CHAIN_CONFIG:
  #cluster_builder: default
  registry:
    server: "$REGISTRY_HOST"
    repository: "$REGISTRY_PROJECT/supply-chain"
EOF

fi

####
log "Creating configuration file: dev-namespace-enable.yaml"
cat > "dev-namespace-enable.yaml" <<EOF

---

apiVersion: v1
kind: Secret
metadata:
  name: git-access
  annotations:
    tekton.dev/git-0: $GITOPS_SERVER
type: kubernetes.io/basic-auth 
stringData:
  username: $GITOPS_OWNER
  password: $GIT_ACCESS_TOKEN

---
apiVersion: v1
kind: Secret
metadata:
  name: tap-registry
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
secrets:
  - name: registry-credentials
  - name: git-access
  - name: tap-registry
imagePullSecrets:
  - name: registry-credentials
  - name: tap-registry

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-deliverable
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deliverable
subjects:
  - kind: ServiceAccount
    name: default
    
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-workload
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload
subjects:
  - kind: ServiceAccount
    name: default

---
EOF


####
